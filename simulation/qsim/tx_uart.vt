// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/26/2023 22:02:01"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    tx_uart
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module tx_uart_vlg_sample_tst(
	clk,
	reset,
	tx_data,
	tx_datavalid,
	sampler_tx
);
input  clk;
input  reset;
input [31:0] tx_data;
input  tx_datavalid;
output sampler_tx;

reg sample;
time current_time;
always @(clk or reset or tx_data or tx_datavalid)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module tx_uart_vlg_check_tst (
	tx_line,
	sampler_rx
);
input  tx_line;
input sampler_rx;

reg  tx_line_expected;

reg  tx_line_prev;

reg  tx_line_expected_prev;

reg  last_tx_line_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	tx_line_prev = tx_line;
end

// update expected /o prevs

always @(trigger)
begin
	tx_line_expected_prev = tx_line_expected;
end



// expected tx_line
initial
begin
	tx_line_expected = 1'bX;
end 
// generate trigger
always @(tx_line_expected or tx_line)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected tx_line = %b | ",tx_line_expected_prev);
	$display("| real tx_line = %b | ",tx_line_prev);
`endif
	if (
		( tx_line_expected_prev !== 1'bx ) && ( tx_line_prev !== tx_line_expected_prev )
		&& ((tx_line_expected_prev !== last_tx_line_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tx_line :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tx_line_expected_prev);
		$display ("     Real value = %b", tx_line_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_tx_line_exp = tx_line_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module tx_uart_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg reset;
reg [31:0] tx_data;
reg tx_datavalid;
// wires                                               
wire tx_line;

wire sampler;                             

// assign statements (if any)                          
tx_uart i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.reset(reset),
	.tx_data(tx_data),
	.tx_datavalid(tx_datavalid),
	.tx_line(tx_line)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #1280000 1'b1;
	reset = #3840000 1'b0;
end 
// tx_data[ 31 ]
initial
begin
	tx_data[31] = 1'b1;
end 
// tx_data[ 30 ]
initial
begin
	tx_data[30] = 1'b0;
end 
// tx_data[ 29 ]
initial
begin
	tx_data[29] = 1'b1;
end 
// tx_data[ 28 ]
initial
begin
	tx_data[28] = 1'b0;
end 
// tx_data[ 27 ]
initial
begin
	tx_data[27] = 1'b1;
end 
// tx_data[ 26 ]
initial
begin
	tx_data[26] = 1'b0;
end 
// tx_data[ 25 ]
initial
begin
	tx_data[25] = 1'b1;
end 
// tx_data[ 24 ]
initial
begin
	tx_data[24] = 1'b0;
end 
// tx_data[ 23 ]
initial
begin
	tx_data[23] = 1'b1;
end 
// tx_data[ 22 ]
initial
begin
	tx_data[22] = 1'b0;
end 
// tx_data[ 21 ]
initial
begin
	tx_data[21] = 1'b1;
end 
// tx_data[ 20 ]
initial
begin
	tx_data[20] = 1'b0;
end 
// tx_data[ 19 ]
initial
begin
	tx_data[19] = 1'b1;
end 
// tx_data[ 18 ]
initial
begin
	tx_data[18] = 1'b0;
end 
// tx_data[ 17 ]
initial
begin
	tx_data[17] = 1'b1;
end 
// tx_data[ 16 ]
initial
begin
	tx_data[16] = 1'b0;
end 
// tx_data[ 15 ]
initial
begin
	tx_data[15] = 1'b1;
end 
// tx_data[ 14 ]
initial
begin
	tx_data[14] = 1'b0;
end 
// tx_data[ 13 ]
initial
begin
	tx_data[13] = 1'b1;
end 
// tx_data[ 12 ]
initial
begin
	tx_data[12] = 1'b0;
end 
// tx_data[ 11 ]
initial
begin
	tx_data[11] = 1'b1;
end 
// tx_data[ 10 ]
initial
begin
	tx_data[10] = 1'b0;
end 
// tx_data[ 9 ]
initial
begin
	tx_data[9] = 1'b1;
end 
// tx_data[ 8 ]
initial
begin
	tx_data[8] = 1'b0;
end 
// tx_data[ 7 ]
initial
begin
	tx_data[7] = 1'b1;
end 
// tx_data[ 6 ]
initial
begin
	tx_data[6] = 1'b0;
end 
// tx_data[ 5 ]
initial
begin
	tx_data[5] = 1'b1;
end 
// tx_data[ 4 ]
initial
begin
	tx_data[4] = 1'b0;
end 
// tx_data[ 3 ]
initial
begin
	tx_data[3] = 1'b1;
end 
// tx_data[ 2 ]
initial
begin
	tx_data[2] = 1'b0;
end 
// tx_data[ 1 ]
initial
begin
	tx_data[1] = 1'b1;
end 
// tx_data[ 0 ]
initial
begin
	tx_data[0] = 1'b0;
end 

// tx_datavalid
initial
begin
	tx_datavalid = 1'b1;
	tx_datavalid = #17920000 1'b0;
	tx_datavalid = #38400000 1'b1;
end 

tx_uart_vlg_sample_tst tb_sample (
	.clk(clk),
	.reset(reset),
	.tx_data(tx_data),
	.tx_datavalid(tx_datavalid),
	.sampler_tx(sampler)
);

tx_uart_vlg_check_tst tb_out(
	.tx_line(tx_line),
	.sampler_rx(sampler)
);
endmodule

